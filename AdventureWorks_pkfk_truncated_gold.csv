schema,question,sql
"CREATE TABLE Department (
  DEPARTMENTID INT primary key,
  NAME VARCHAR(255),
  GROUPNAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE EmployeeDepartmentHistory (
  BUSINESSENTITYID INT,
  DEPARTMENTID INT,
  SHIFTID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID),
  foreign key DEPARTMENTID references DEPARTMENT(DEPARTMENTID),
  foreign key SHIFTID references SHIFT(SHIFTID)
);",get me department wise employee count currently working in that department and order by department,"SELECT d.NAME AS department_name, COUNT(edh.BUSINESSENTITYID) AS employee_count FROM Department AS d JOIN EmployeeDepartmentHistory AS edh ON d.DEPARTMENTID = edh.DEPARTMENTID WHERE edh.ENDDATE IS NULL GROUP BY d.NAME ORDER BY d.NAME"
"CREATE TABLE Department (
  DEPARTMENTID INT primary key,
  NAME VARCHAR(255),
  GROUPNAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE Shift (
  SHIFTID INT primary key,
  NAME VARCHAR(255),
  STARTTIME TIME,
  ENDTIME TIME,
  MODIFIEDDATE DATETIME
);
CREATE TABLE EmployeeDepartmentHistory (
  BUSINESSENTITYID INT,
  DEPARTMENTID INT,
  SHIFTID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID),
  foreign key DEPARTMENTID references DEPARTMENT(DEPARTMENTID),
  foreign key SHIFTID references SHIFT(SHIFTID)
);",get department wise count of employees currently working 'Night' shift in that department and order by most night shifts,"SELECT d.NAME, COUNT(*) AS NightShiftCount FROM EmployeeDepartmentHistory AS edh JOIN Department AS d ON edh.DEPARTMENTID = d.DEPARTMENTID JOIN Shift AS s ON edh.SHIFTID = s.SHIFTID WHERE s.NAME = 'Night' AND edh.ENDDATE IS NULL GROUP BY d.NAME ORDER BY NightShiftCount DESC"
"CREATE TABLE Employee (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);",get count of female('F') employees hired in the last 20 year,SELECT COUNT(*) FROM EMPLOYEE WHERE GENDER = 'F' AND EXTRACT('year' FROM HIREDATE) >= EXTRACT('year' FROM CURRENT_DATE - INTERVAL '20' YEARS)
"CREATE TABLE EmployeeDepartmentHistory (
  BUSINESSENTITYID INT,
  DEPARTMENTID INT,
  SHIFTID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID),
  foreign key DEPARTMENTID references DEPARTMENT(DEPARTMENTID),
  foreign key SHIFTID references SHIFT(SHIFTID)
);
CREATE TABLE Department (
  DEPARTMENTID INT primary key,
  NAME VARCHAR(255),
  GROUPNAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE Employee (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);","get department wise female('F') count and male('M') count. Then find female to male ratio as 'GenderRatio'. If male count is 0, then GenderRatio should be -1. Sort by highest ratio","SELECT d.NAME AS DepartmentName, COUNT(CASE WHEN e.GENDER = 'F' THEN 1 END) AS FemaleCount, COUNT(CASE WHEN e.GENDER = 'M' THEN 1 END) AS MaleCount, CASE WHEN COUNT(CASE WHEN e.GENDER = 'M' THEN 1 END) = 0 THEN -1 ELSE CAST(COUNT(CASE WHEN e.GENDER = 'F' THEN 1 END) AS FLOAT) / CAST(COUNT(CASE WHEN e.GENDER = 'M' THEN 1 END) AS FLOAT) END AS GenderRatio FROM Employee AS e JOIN EmployeeDepartmentHistory AS edh ON e.BUSINESSENTITYID = edh.BUSINESSENTITYID JOIN Department AS d ON edh.DEPARTMENTID = d.DEPARTMENTID GROUP BY d.NAME ORDER BY GenderRatio DESC"
"CREATE TABLE JobCandidate (
  JOBCANDIDATEID INT primary key,
  BUSINESSENTITYID INT,
  RESUME VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID)
);
CREATE TABLE Employee (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);",how many job candidates were hired,SELECT COUNT(*) FROM JobCandidate JOIN Employee ON JobCandidate.BUSINESSENTITYID = Employee.BUSINESSENTITYID
"CREATE TABLE EmployeePayHistory (
  BUSINESSENTITYID INT,
  RATECHANGEDATE DATETIME,
  RATE INT,
  PAYFREQUENCY ENUM('Monthly', 'Biweekly'),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID)
);",get employee wise annual salary,"SELECT BUSINESSENTITYID, EPH.RATE * CASE WHEN EPH.PAYFREQUENCY = 'Monthly' THEN 12 ELSE 24 END AS Salary 
FROM EmployeePayHistory AS EPH"
"CREATE TABLE Employees (
  EMPLOYEE_ID INT primary key,
  FIRST_NAME VARCHAR(255),
  LAST_NAME VARCHAR(255),
  EMAIL VARCHAR(255),
  PHONE_NUMBER VARCHAR(25),
  HIRE_DATE DATE,
  JOB_ID INT,
  SALARY DECIMAL,
  COMMISION_PCT DECIMAL,
  MANAGER_ID INT,
  SSN VARCHAR(11),
  GENDER ENUM('M', 'F'),
  MARITAL_STATUS ENUM('M', 'S'),
  ALT_NUM VARCHAR(25),
  DEPARTMENT_ID INT,
  DATE_OF_BIRTH DATE
);",List employee full name and their total effective salary including commission order by highest effective salary,"SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME, SALARY + COALESCE(COMMISION_PCT * SALARY, 0) AS EFFECTIVE_SALARY FROM Employees ORDER BY EFFECTIVE_SALARY DESC"
"CREATE TABLE Department (
  DEPARTMENTID INT primary key,
  NAME VARCHAR(255),
  GROUPNAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE EmployeeDepartmentHistory (
  BUSINESSENTITYID INT,
  DEPARTMENTID INT,
  SHIFTID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID),
  foreign key DEPARTMENTID references DEPARTMENT(DEPARTMENTID),
  foreign key SHIFTID references SHIFT(SHIFTID)
);",show department name and current employee count having the highest number of employees,"SELECT D.NAME, COUNT(EDH.BUSINESSENTITYID) AS EMPLOYEE_COUNT FROM Department AS D JOIN EmployeeDepartmentHistory AS EDH ON D.DEPARTMENTID = EDH.DEPARTMENTID WHERE EDH.ENDDATE IS NULL GROUP BY D.NAME ORDER BY EMPLOYEE_COUNT DESC LIMIT 1"
"CREATE TABLE Department (
  DEPARTMENTID INT primary key,
  NAME VARCHAR(255),
  GROUPNAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE EmployeeDepartmentHistory (
  BUSINESSENTITYID INT,
  DEPARTMENTID INT,
  SHIFTID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID),
  foreign key DEPARTMENTID references DEPARTMENT(DEPARTMENTID),
  foreign key SHIFTID references SHIFT(SHIFTID)
);",show first 5 letters of department name and current employee count having the highest number of employees,"SELECT LEFT(d.NAME, 5) AS DEPT_NAME, COUNT(*) AS EMP_COUNT FROM EmployeeDepartmentHistory AS edh JOIN Department AS d ON edh.DEPARTMENTID = d.DEPARTMENTID WHERE edh.ENDDATE IS NULL GROUP BY d.NAME ORDER BY EMP_COUNT DESC LIMIT 1"
"CREATE TABLE Department (
  DEPARTMENTID INT primary key,
  NAME VARCHAR(255),
  GROUPNAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE EmployeeDepartmentHistory (
  BUSINESSENTITYID INT,
  DEPARTMENTID INT,
  SHIFTID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID),
  foreign key DEPARTMENTID references DEPARTMENT(DEPARTMENTID),
  foreign key SHIFTID references SHIFT(SHIFTID)
);",show department name in upper case and current employee count having the highest number of employees,"SELECT UPPER(d.NAME) AS DEPARTMENT_NAME, COUNT(*) AS EMPLOYEE_COUNT FROM DEPARTMENT AS d JOIN EMPLOYEEDEPARTMENTHISTORY AS edh ON d.DEPARTMENTID = edh.DEPARTMENTID WHERE edh.ENDDATE IS NULL GROUP BY d.NAME ORDER BY EMPLOYEE_COUNT DESC LIMIT 1"
"CREATE TABLE PERSON (
  BUSINESSENTITYID INT primary key,
  PERSONTYPE ENUM('Store Contact', 'Individual Customer', 'Sales Person', 'Employee', 'Vendor', 'General Contact'),
  NAMESTYLE INT,
  TITLE VARCHAR(255),
  FIRSTNAME VARCHAR(255),
  MIDDLENAME VARCHAR(255),
  LASTNAME VARCHAR(255),
  SUFFIX VARCHAR(255),
  EMAILPROMOTION BOOLEAN,
  ADDITIONALCONTACTINFO VARCHAR(255),
  DEMOGRAPHICS VARCHAR(255),
  ROWGUID VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
);
CREATE TABLE BUSINESSENTITYADDRESS (
  BUSINESSENTITYID INT,
  ADDRESSID INT,
  ADDRESSTYPEID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
  foreign key ADDRESSID references ADDRESS(ADDRESSID)
  foreign key ADDRESSTYPEID references ADDRESSTYPE(ADDRESSTYPEID)
);
CREATE TABLE ADDRESS (
  ADDRESSID INT primary key,
  ADDRESSLINE1 VARCHAR(255),
  ADDRESSLINE2 VARCHAR(255),
  CITY VARCHAR(255),
  STATEPROVINCEID INT,
  POSTALCODE VARCHAR(255),
  SPATIALLOCATION VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key STATEPROVINCEID references STATEPROVINCE(STATEPROVINCEID)
);
CREATE TABLE ADDRESSTYPE (
  ADDRESSTYPEID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);
CREATE TABLE STATEPROVINCE (
  STATEPROVINCEID INT primary key,
  STATEPROVINCECODE VARCHAR(3),
  COUNTRYREGIONCODE VARCHAR(3),
  ISONLYSTATEPROVINCEFLAG BOOLEAN,
  NAME VARCHAR(50),
  TERRITORYID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key TERRITORYID references SALESTERRITORY(TERRITORYID),
  foreign key COUNTRYREGIONCODE references COUNTRYREGION(COUNTRYREGIONCODE)
);
CREATE TABLE COUNTRYREGION (
  COUNTRYREGIONCODE VARCHAR(3) primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);","get full name and corresponding full address having 'Home' address type. If any of the columns are null, do not include them. Finally, Sort by name","SELECT CONCAT(P.FIRSTNAME, ' ', COALESCE(P.MIDDLENAME, ''), ' ', P.LASTNAME) AS FULL_NAME, CONCAT(A.ADDRESSLINE1, ' ', COALESCE(A.ADDRESSLINE2, ''), ' ', A.CITY, ' ', SP.NAME, ' ', CR.NAME, ' ', A.POSTALCODE) AS FULL_ADDRESS FROM PERSON AS P JOIN BUSINESSENTITYADDRESS AS BEA ON P.BUSINESSENTITYID = BEA.BUSINESSENTITYID JOIN ADDRESS AS A ON BEA.ADDRESSID = A.ADDRESSID JOIN ADDRESSTYPE AS AT ON BEA.ADDRESSTYPEID = AT.ADDRESSTYPEID JOIN STATEPROVINCE AS SP ON A.STATEPROVINCEID = SP.STATEPROVINCEID JOIN COUNTRYREGION AS CR ON CR.COUNTRYREGIONCODE = SP.COUNTRYREGIONCODE WHERE AT.NAME = 'Home' ORDER BY FULL_NAME"
"CREATE TABLE PERSON (
  BUSINESSENTITYID INT primary key,
  PERSONTYPE ENUM('Store Contact', 'Individual Customer', 'Sales Person', 'Employee', 'Vendor', 'General Contact'),
  NAMESTYLE INT,
  TITLE VARCHAR(255),
  FIRSTNAME VARCHAR(255),
  MIDDLENAME VARCHAR(255),
  LASTNAME VARCHAR(255),
  SUFFIX VARCHAR(255),
  EMAILPROMOTION BOOLEAN,
  ADDITIONALCONTACTINFO VARCHAR(255),
  DEMOGRAPHICS VARCHAR(255),
  ROWGUID VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
);
CREATE TABLE BUSINESSENTITYADDRESS (
  BUSINESSENTITYID INT,
  ADDRESSID INT,
  ADDRESSTYPEID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
  foreign key ADDRESSID references ADDRESS(ADDRESSID)
  foreign key ADDRESSTYPEID references ADDRESSTYPE(ADDRESSTYPEID)
);
CREATE TABLE ADDRESS (
  ADDRESSID INT primary key,
  ADDRESSLINE1 VARCHAR(255),
  ADDRESSLINE2 VARCHAR(255),
  CITY VARCHAR(255),
  STATEPROVINCEID INT,
  POSTALCODE VARCHAR(255),
  SPATIALLOCATION VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key STATEPROVINCEID references STATEPROVINCE(STATEPROVINCEID)
);
CREATE TABLE ADDRESSTYPE (
  ADDRESSTYPEID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);","show city wise count of number of people having 'Home' address type , sort by highest population","SELECT a.CITY, COUNT(p.BUSINESSENTITYID) AS POPULATION FROM PERSON AS p JOIN BUSINESSENTITYADDRESS AS bea ON bea.BUSINESSENTITYID = p.BUSINESSENTITYID JOIN ADDRESS AS a ON a.ADDRESSID = bea.ADDRESSID JOIN ADDRESSTYPE AS at ON bea.ADDRESSTYPEID = at.ADDRESSTYPEID WHERE at.NAME = 'Home' GROUP BY a.CITY ORDER BY POPULATION DESC"
"CREATE TABLE COUNTRYREGION (
  COUNTRYREGIONCODE VARCHAR(3) primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE ADDRESS (
  ADDRESSID INT primary key,
  ADDRESSLINE1 VARCHAR(255),
  ADDRESSLINE2 VARCHAR(255),
  CITY VARCHAR(255),
  STATEPROVINCEID INT,
  POSTALCODE VARCHAR(255),
  SPATIALLOCATION VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key STATEPROVINCEID references STATEPROVINCE(STATEPROVINCEID)
);
CREATE TABLE STATEPROVINCE (
  STATEPROVINCEID INT primary key,
  STATEPROVINCECODE VARCHAR(3),
  COUNTRYREGIONCODE VARCHAR(3),
  ISONLYSTATEPROVINCEFLAG BOOLEAN,
  NAME VARCHAR(50),
  TERRITORYID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key TERRITORYID references SALESTERRITORY(TERRITORYID),
  foreign key COUNTRYREGIONCODE references COUNTRYREGION(COUNTRYREGIONCODE)
);","show country wise count of number of different cities. Finally, sort by highest cities count","SELECT COUNTRYREGION.NAME AS COUNTRY, COUNT(DISTINCT ADDRESS.CITY) AS CITY_COUNT FROM COUNTRYREGION JOIN STATEPROVINCE ON COUNTRYREGION.COUNTRYREGIONCODE = STATEPROVINCE.COUNTRYREGIONCODE JOIN ADDRESS ON STATEPROVINCE.STATEPROVINCEID = ADDRESS.STATEPROVINCEID GROUP BY COUNTRYREGION.NAME ORDER BY CITY_COUNT DESC"
"CREATE TABLE PERSON (
  BUSINESSENTITYID INT primary key,
  PERSONTYPE ENUM('Store Contact', 'Individual Customer', 'Sales Person', 'Employee', 'Vendor', 'General Contact'),
  NAMESTYLE INT,
  TITLE VARCHAR(255),
  FIRSTNAME VARCHAR(255),
  MIDDLENAME VARCHAR(255),
  LASTNAME VARCHAR(255),
  SUFFIX VARCHAR(255),
  EMAILPROMOTION BOOLEAN,
  ADDITIONALCONTACTINFO VARCHAR(255),
  DEMOGRAPHICS VARCHAR(255),
  ROWGUID VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
);
CREATE TABLE BUSINESSENTITYADDRESS (
  BUSINESSENTITYID INT,
  ADDRESSID INT,
  ADDRESSTYPEID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
  foreign key ADDRESSID references ADDRESS(ADDRESSID)
  foreign key ADDRESSTYPEID references ADDRESSTYPE(ADDRESSTYPEID)
);
CREATE TABLE BUSINESSENTITYCONTACT (
  BUSINESSENTITYID INT,
  PERSONID INT,
  CONTACTTYPEID INT,
  ROWGUID VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID),
  foreign key PERSONID references PERSON(PERSONID),
  foreign key CONTACTTYPEID references CONTACTTYPE(CONTACTTYPEID)
);
CREATE TABLE ADDRESS (
  ADDRESSID INT primary key,
  ADDRESSLINE1 VARCHAR(255),
  ADDRESSLINE2 VARCHAR(255),
  CITY VARCHAR(255),
  STATEPROVINCEID INT,
  POSTALCODE VARCHAR(255),
  SPATIALLOCATION VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key STATEPROVINCEID references STATEPROVINCE(STATEPROVINCEID)
);
CREATE TABLE CONTACTTYPE (
  CONTACTTYPEID INT primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE STATEPROVINCE (
  STATEPROVINCEID INT primary key,
  STATEPROVINCECODE VARCHAR(3),
  COUNTRYREGIONCODE VARCHAR(3),
  ISONLYSTATEPROVINCEFLAG BOOLEAN,
  NAME VARCHAR(50),
  TERRITORYID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key TERRITORYID references SALESTERRITORY(TERRITORYID),
  foreign key COUNTRYREGIONCODE references COUNTRYREGION(COUNTRYREGIONCODE)
);
CREATE TABLE COUNTRYREGION (
  COUNTRYREGIONCODE VARCHAR(3) primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);",get list of full person name and full address ignoring null fields having contact type as 'Purchasing Manager'. Finally sort by full name,"SELECT CONCAT(P.FIRSTNAME, ' ', P.LASTNAME) AS FULL_NAME, CONCAT(A.ADDRESSLINE1, ' ', COALESCE(A.ADDRESSLINE2, ''), ' ', A.CITY, ' ', SP.NAME, ' ', CR.NAME, ' ', A.POSTALCODE) AS FULL_ADDRESS FROM PERSON AS P JOIN BUSINESSENTITYCONTACT AS BEC ON BEC.PERSONID = P.BUSINESSENTITYID JOIN CONTACTTYPE AS CT ON BEC.CONTACTTYPEID = CT.CONTACTTYPEID JOIN BUSINESSENTITYADDRESS AS BEA ON BEA.BUSINESSENTITYID = BEC.BUSINESSENTITYID JOIN ADDRESS AS A ON BEA.ADDRESSID = A.ADDRESSID JOIN STATEPROVINCE AS SP ON A.STATEPROVINCEID = SP.STATEPROVINCEID JOIN COUNTRYREGION AS CR ON CR.COUNTRYREGIONCODE = SP.COUNTRYREGIONCODE WHERE CT.NAME = 'Purchasing Manager' ORDER BY FULL_NAME"
"CREATE TABLE Employee (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);",show number of employees working currently (flag=1) for atleast 15 years.,SELECT COUNT(*) FROM Employee WHERE HIREDATE <= (CURRENT_DATE - INTERVAL '15' YEARS) AND CURRENTFLAG = 1
"CREATE TABLE Employee (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);",show number of current (flag=1) employees working for atleast 15 years if male else working for more than 10 years if female,SELECT COUNT(*) FROM Employee WHERE CURRENTFLAG = 1 AND ((GENDER = 'M' AND HIREDATE <= CURRENT_TIMESTAMP() - INTERVAL '15' YEARS) OR (GENDER = 'F' AND HIREDATE <= CURRENT_TIMESTAMP() - INTERVAL '10' YEARS))
"CREATE TABLE EmployeePayHistory (
  BUSINESSENTITYID INT,
  RATECHANGEDATE DATETIME,
  RATE INT,
  PAYFREQUENCY ENUM('Monthly', 'Biweekly'),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID)
);","show count of employees having pay rate in ranges 0-25, 26-50, 51-75, 76-100 and 100+, order by highest employee count","SELECT CASE WHEN RATE BETWEEN 0 AND 25 THEN '0-25' WHEN RATE BETWEEN 26 AND 50 THEN '26-50' WHEN RATE BETWEEN 51 AND 75 THEN '51-75' WHEN RATE BETWEEN 76 AND 100 THEN '76-100' ELSE '100+' END AS rate_range, COUNT(*) AS employee_count FROM EmployeePayHistory GROUP BY rate_range ORDER BY employee_count DESC"
"CREATE TABLE NATION (
  N_NATIONKEY INT primary key,
  N_NAME VARCHAR(255),
  N_REGIONKEY INT,
  N_COMMENT VARCHAR(255),
  foreign key N_REGIONKEY references REGION(R_REGIONKEY)
);
CREATE TABLE CUSTOMER (
  C_CUSTKEY INT primary key,
  C_NAME VARCHAR(255),
  C_ADDRESS VARCHAR(255),
  C_NATIONKEY INT,
  C_PHONE VARCHAR(255),
  C_ACCTBAL FLOAT,
  C_MKTSEGMENT ENUM('Household', 'Building', 'Automobile', 'Furniture', 'Machinery'),
  C_COMMENT VARCHAR(255),
  foreign key C_NATIONKEY references NATION(N_NATIONKEY)
);",find nations wise average customer balance and sort by lowest average customer balance,"SELECT N.N_NAME, AVG(C.C_ACCTBAL) AS AVG_BALANCE FROM CUSTOMER AS C JOIN NATION AS N ON C.C_NATIONKEY = N.N_NATIONKEY GROUP BY N.N_NAME ORDER BY AVG_BALANCE ASC"
"CREATE TABLE ORDERS (
  O_ORDERKEY INT primary key,
  O_CUSTKEY INT,
  O_ORDERSTATUS ENUM('Ordered', 'Failed'),
  O_TOTALPRICE FLOAT,
  O_ORDERDATE DATE,
  O_ORDERPRIORITY ENUM(1,2,3,4,5),
  O_CLERK VARCHAR(255),
  O_SHIPPRIORITY ENUM(0,1,2,3,4,5),
  O_COMMENT VARCHAR(255),
  foreign key O_CUSTKEY references CUSTOMER(C_CUSTKEY)
);
CREATE TABLE CUSTOMER (
  C_CUSTKEY INT primary key,
  C_NAME VARCHAR(255),
  C_ADDRESS VARCHAR(255),
  C_NATIONKEY INT,
  C_PHONE VARCHAR(255),
  C_ACCTBAL FLOAT,
  C_MKTSEGMENT ENUM('Household', 'Building', 'Automobile', 'Furniture', 'Machinery'),
  C_COMMENT VARCHAR(255),
  foreign key C_NATIONKEY references NATION(N_NATIONKEY)
);",get customer name wise number of orders and average total order value. order by highest orders and if order count is same by avg total order value,"SELECT c.C_NAME AS customer_name, COUNT(o.O_ORDERKEY) AS order_count, AVG(o.O_TOTALPRICE) AS avg_total_order_value FROM CUSTOMER AS c JOIN ORDERS AS o ON c.C_CUSTKEY = o.O_CUSTKEY GROUP BY c.C_NAME ORDER BY order_count DESC, avg_total_order_value DESC"
"CREATE TABLE ORDERS (
  O_ORDERKEY INT primary key,
  O_CUSTKEY INT,
  O_ORDERSTATUS ENUM('Ordered', 'Failed'),
  O_TOTALPRICE FLOAT,
  O_ORDERDATE DATE,
  O_ORDERPRIORITY ENUM(1,2,3,4,5),
  O_CLERK VARCHAR(255),
  O_SHIPPRIORITY ENUM(0,1,2,3,4,5),
  O_COMMENT VARCHAR(255),
  foreign key O_CUSTKEY references CUSTOMER(C_CUSTKEY)
);
CREATE TABLE CUSTOMER (
  C_CUSTKEY INT primary key,
  C_NAME VARCHAR(255),
  C_ADDRESS VARCHAR(255),
  C_NATIONKEY INT,
  C_PHONE VARCHAR(255),
  C_ACCTBAL FLOAT,
  C_MKTSEGMENT ENUM('Household', 'Building', 'Automobile', 'Furniture', 'Machinery'),
  C_COMMENT VARCHAR(255),
  foreign key C_NATIONKEY references NATION(N_NATIONKEY)
);","get customer name, average number of orders, average total order value sorted by name","SELECT C.C_NAME AS customer_name, COUNT(O.O_ORDERKEY) AS average_number_of_orders, AVG(O.O_TOTALPRICE) AS average_total_order_value FROM CUSTOMER AS C JOIN ORDERS AS O ON C.C_CUSTKEY = O.O_CUSTKEY GROUP BY C.C_NAME ORDER BY C.C_NAME"
"CREATE TABLE REGION (
  R_REGIONKEY INT primary key,
  R_NAME VARCHAR(255),
  R_COMMENT VARCHAR
);
CREATE TABLE NATION (
  N_NATIONKEY INT primary key,
  N_NAME VARCHAR(255),
  N_REGIONKEY INT,
  N_COMMENT VARCHAR(255),
  foreign key N_REGIONKEY references REGION(R_REGIONKEY)
);
CREATE TABLE SUPPLIER (
  S_SUPPKEY INT primary key,
  S_NAME VARCHAR(255),
  S_ADDRESS VARCHAR(255),
  S_NATIONKEY INT,
  S_PHONE VARCHAR(255),
  S_ACCTBAL FLOAT,
  S_COMMENT VARCHAR(255),
  foreign key S_NATIONKEY references NATION(N_NATIONKEY)
);
CREATE TABLE CUSTOMER (
  C_CUSTKEY INT primary key,
  C_NAME VARCHAR(255),
  C_ADDRESS VARCHAR(255),
  C_NATIONKEY INT,
  C_PHONE VARCHAR(255),
  C_ACCTBAL FLOAT,
  C_MKTSEGMENT ENUM('Household', 'Building', 'Automobile', 'Furniture', 'Machinery'),
  C_COMMENT VARCHAR(255),
  foreign key C_NATIONKEY references NATION(N_NATIONKEY)
);",get list of regionwise number of distinct supplier and number of distinct customers. Sort by maximum supplier per customer ratio,"SELECT R_NAME AS REGION, COUNT(DISTINCT S_SUPPKEY) AS NUM_SUPPLIERS, COUNT(DISTINCT C_CUSTKEY) AS NUM_CUSTOMERS, COUNT(DISTINCT S_SUPPKEY) / COUNT(DISTINCT C_CUSTKEY) AS SUPPLIERS_PER_CUSTOMER FROM REGION JOIN NATION ON R_REGIONKEY = N_REGIONKEY JOIN CUSTOMER ON N_NATIONKEY = C_NATIONKEY JOIN SUPPLIER ON N_NATIONKEY = S_NATIONKEY GROUP BY R_NAME ORDER BY SUPPLIERS_PER_CUSTOMER DESC"
"CREATE TABLE LINEITEM (
  L_ORDERKEY INT,
  L_PARTKEY INT,
  L_SUPPKEY INT,
  L_LINENUMBER INT,
  L_QUANTITY FLOAT,
  L_EXTENDEDPRICE FLOAT,
  L_DISCOUNT FLOAT,
  L_TAX FLOAT,
  L_RETURNFLAG BOOLEAN,
  L_LINESTATUS VARCHAR(255),
  L_SHIPDATE DATE,
  L_COMMITDATE DATE,
  L_RECEIPTDATE DATE,
  L_SHIPINSTRUCT VARCHAR(255),
  L_SHIPMODE ENUM('Mail', 'Air', 'Truck', 'Ship', 'FOB', 'Rail'),
  L_COMMENT VARCHAR(255),
  foreign key L_ORDERKEY references ORDER(O_ORDERKEY),
  foreign key L_PARTKEY references PART(P_PARTKEY),
  foreign key L_SUPPKEY references SUPPLIER(L_SUPPKEY)
);
CREATE TABLE PART (
  P_PARTKEY INT primary key,
  P_NAME VARCHAR(55),
  P_MFGR VARCHAR(255),
  P_BRAND VARCHAR(255),
  P_TYPE VARCHAR(255),
  P_SIZE INT,
  P_CONTAINER VARCHAR(255),
  P_RETAILPRICE FLOAT,
  P_COMMENT VARCHAR
);",list names of top 3 parts with most orders,"SELECT P.P_NAME, COUNT(L.L_ORDERKEY) AS order_count FROM PART AS P JOIN LINEITEM AS L ON P.P_PARTKEY = L.L_PARTKEY GROUP BY P.P_NAME ORDER BY order_count DESC LIMIT 3"
"CREATE TABLE LINEITEM (
  L_ORDERKEY INT,
  L_PARTKEY INT,
  L_SUPPKEY INT,
  L_LINENUMBER INT,
  L_QUANTITY FLOAT,
  L_EXTENDEDPRICE FLOAT,
  L_DISCOUNT FLOAT,
  L_TAX FLOAT,
  L_RETURNFLAG BOOLEAN,
  L_LINESTATUS VARCHAR(255),
  L_SHIPDATE DATE,
  L_COMMITDATE DATE,
  L_RECEIPTDATE DATE,
  L_SHIPINSTRUCT VARCHAR(255),
  L_SHIPMODE ENUM('Mail', 'Air', 'Truck', 'Ship', 'FOB', 'Rail'),
  L_COMMENT VARCHAR(255),
  foreign key L_ORDERKEY references ORDER(O_ORDERKEY),
  foreign key L_PARTKEY references PART(P_PARTKEY),
  foreign key L_SUPPKEY references SUPPLIER(L_SUPPKEY)
);
CREATE TABLE PART (
  P_PARTKEY INT primary key,
  P_NAME VARCHAR(55),
  P_MFGR VARCHAR(255),
  P_BRAND VARCHAR(255),
  P_TYPE VARCHAR(255),
  P_SIZE INT,
  P_CONTAINER VARCHAR(255),
  P_RETAILPRICE FLOAT,
  P_COMMENT VARCHAR
);",get the name and total quantity ordered of product with the maximum total quantity ,"SELECT P.P_NAME, SUM(L.L_QUANTITY) AS TOTAL_QUANTITY FROM LINEITEM AS L JOIN PART AS P ON L.L_PARTKEY = P.P_PARTKEY GROUP BY P.P_NAME ORDER BY TOTAL_QUANTITY DESC LIMIT 1"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTCATEGORY (
  PRODUCTCATEGORYID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);",list all product names along with their corresponding array of all categories and array of all subcategories sorted by product name,"SELECT P.NAME AS PRODUCT_NAME, JSON_ARRAYAGG(DISTINCT C.NAME) AS CATEGORIES, JSON_ARRAYAGG(DISTINCT S.NAME) AS SUBCATEGORIES FROM PRODUCT AS P LEFT JOIN PRODUCTSUBCATEGORY AS S ON P.PRODUCTSUBCATEGORYID = S.PRODUCTSUBCATEGORYID LEFT JOIN PRODUCTCATEGORY AS C ON S.PRODUCTCATEGORYID = C.PRODUCTCATEGORYID GROUP BY P.NAME ORDER BY P.NAME"
"CREATE TABLE SALESORDERHEADER (
  SALESORDERID INT primary key,
  REVISIONNUMBER INT,
  ORDERDATE DATETIME,
  DUEDATE DATETIME,
  SHIPDATE DATETIME,
  STATUS ENUM('In process', 'Approved', 'Backordered', 'Rejected', 'Shipped', 'Cancelled'),
  ONLINEORDERFLAG BOOLEAN,
  SALESORDERNUMBER INT,
  PURCHASEORDERNUMBER VARCHAR(255),
  ACCOUNTNUMBER VARCHAR(255),
  CUSTOMERID INT,
  SALESPERSONID INT,
  TERRITORYID INT,
  BILLTOADDRESSID INT,
  SHIPTOADDRESSID INT,
  SHIPMETHODID INT,
  CREDITCARDID INT,
  CREDITCARDAPPROVALCODE VARCHAR(255),
  CURRENCYRATEID INT,
  SUBTOTAL DECIMAL,
  TAXAMT DECIMAL,
  FREIGHT DECIMAL,
  TOTALDUE DECIMAL,
  COMMENT DECIMAL,
  ROWGUID VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key CUSTOMERID references CUSTOMER(BUSINESSENTITYID),
  foreign key SALESPERSONID references SALESPERSON(BUSINESSENTITYID),
  foreign key TERRITORYID references SALESTERRITORY(SALESTERRITORYID),
  foreign key BILLTOADDRESSID references ADDRESS(ADDRESSID),
  foreign key SHIPTOADDRESSID references ADDRESS(ADDRESSID),
  foreign key SHIPMETHODID references SHIPMETHOD(SHIPMETHODID),
  foreign key CREDITCARDID references CREDITCARD(CREDITCARDID),
  foreign key CURRENCYRATEID references CURRENCYRATE(CURRENCYRATEID)
);
CREATE TABLE CUSTOMER (
  CUSTOMERID INT primary key,
  PERSONID INT,
  STOREID INT,
  TERRITORYID INT,
  ACCOUNTNUMBER VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PERSONID references PERSON(BUSINESSENTITYID),
  foreign key STOREID references STORE(BUSINESSENTITYID),
  foreign key TERRITORYID references SALESTERRITORY(SALESTERRITORYID)
);","Retrieve the id of customers and their account numbers, and if the customer has made total purchases of more than 1000, label it as 'High Spend Customer', otherwise label it as 'Low Spend Customer'. Ignore customers with no purchase. Sort by id","SELECT c.CUSTOMERID, c.ACCOUNTNUMBER, CASE WHEN SUM(so.TOTALDUE) > 1000 THEN 'High Spend Customer' ELSE 'Low Spend Customer' END AS SPEND_CATEGORY FROM CUSTOMER AS c JOIN SALESORDERHEADER AS so ON c.CUSTOMERID = so.CUSTOMERID GROUP BY c.CUSTOMERID, c.ACCOUNTNUMBER HAVING NOT SUM(so.TOTALDUE) IS NULL ORDER BY c.CUSTOMERID"
"CREATE TABLE SALESPERSON (
  BUSINESSENTITYID INT primary key,
  TERRITORYID INT,
  SALESQUOTA DECIMAL,
  BONUS VARCHAR(255),
  COMMISSIONPCT DECIMAL,
  SALESYTD DECIMAL,
  SALESLASTYEAR DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key TERRITORYID references SALESTERRITORY(SALESTERRITORYID),
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID)
);
CREATE TABLE SALESTERRITORY (
  TERRITORYID INT primary key,
  NAME VARCHAR(255),
  COUNTRYREGIONCODE VARCHAR(3),
  REGION VARCHAR(255),
  SALESYTD DECIMAL,
  SALESLASTYEAR DECIMAL,
  COSTYTD VARCHAR(255),
  COSTLASTYEAR VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key COUNTRYREGIONCODE references COUNTRYREGION(COUNTRYREGIONCODE)
);",List the territories along with their total sales quotas. order by highest sales quota,"SELECT ST.NAME, SUM(SP.SALESQUOTA) AS TOTAL_SALES_QUOTA FROM SALESPERSON AS SP JOIN SALESTERRITORY AS ST ON SP.TERRITORYID = ST.TERRITORYID GROUP BY ST.NAME ORDER BY TOTAL_SALES_QUOTA DESC"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTINVENTORY (
  BUSINESSENTITYID INT,
  PRODUCTID INT,
  LOCATIONID INT,
  SHELF VARCHAR(255),
  BIN INT,
  QUANTITY INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key LOCATIONID references LOCATION(LOCATIONID)
);",Show the cost and total quantity of each product in the inventory. Filter those with total quantity less than 100. Sort by highest cost,"SELECT P.NAME, P.STANDARDCOST, SUM(I.QUANTITY) AS TOTAL_QUANTITY FROM PRODUCT AS P JOIN PRODUCTINVENTORY AS I ON P.PRODUCTID = I.PRODUCTID GROUP BY P.NAME, P.STANDARDCOST HAVING SUM(I.QUANTITY) < 100 ORDER BY P.STANDARDCOST DESC"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTINVENTORY (
  BUSINESSENTITYID INT,
  PRODUCTID INT,
  LOCATIONID INT,
  SHELF VARCHAR(255),
  BIN INT,
  QUANTITY INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key LOCATIONID references LOCATION(LOCATIONID)
);",Show product names and price that are out of stock in the inventory. Sort by lowest price per product,"SELECT P.NAME, P.LISTPRICE FROM PRODUCT AS P JOIN PRODUCTINVENTORY AS PI ON P.PRODUCTID = PI.PRODUCTID WHERE PI.QUANTITY = 0 ORDER BY P.LISTPRICE ASC"
"CREATE TABLE CURRENCY (
  CURRENCYCODE VARCHAR(3) primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE COUNTRYREGION (
  COUNTRYREGIONCODE VARCHAR(3) primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE COUNTRYREGIONCURRENCY (
  COUNTRYREGIONCODE VARCHAR(3),
  CURRENCYCODE VARCHAR(3),
  MODIFIEDDATE DATETIME,
  foreign key COUNTRYREGIONCODE references COUNTRYREGION(COUNTRYREGIONCODE),
  foreign key CURRENCYCODE references CURRENCY(CURRENCYCODE)
);","List all unique countries, their acronym calculated using first 3 letter of the country name in Upper case and also their corresponding currency name, if a country has more than one currency add it as a list. Sort by its acronym","SELECT DISTINCT cr.NAME AS country_name, UPPER(SUBSTRING(cr.NAME, 1, 3)) AS country_acronym, JSON_ARRAYAGG(c.NAME) AS currency_name FROM COUNTRYREGION AS cr JOIN COUNTRYREGIONCURRENCY AS crc ON cr.COUNTRYREGIONCODE = crc.COUNTRYREGIONCODE JOIN CURRENCY AS c ON crc.CURRENCYCODE = c.CURRENCYCODE GROUP BY cr.NAME ORDER BY country_acronym"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTREVIEW (
  PRODUCTREVIEWID INT primary key,
  PRODUCTID INT,
  REVIEWERNAME VARCHAR(255),
  REVIEWDATE DATETIME,
  EMAILADDRESS VARCHAR(255),
  RATING ENUM(1,2,3,4,5),
  COMMENTS VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID)
);",Show product name and their average rating based on the product reviews. Sort by highest rating,"SELECT PRODUCT.NAME, AVG(PRODUCTREVIEW.RATING) AS AVERAGE_RATING FROM PRODUCT JOIN PRODUCTREVIEW ON PRODUCT.PRODUCTID = PRODUCTREVIEW.PRODUCTID GROUP BY PRODUCT.NAME ORDER BY AVERAGE_RATING DESC"
"CREATE TABLE SALESPERSON (
  BUSINESSENTITYID INT primary key,
  TERRITORYID INT,
  SALESQUOTA DECIMAL,
  BONUS VARCHAR(255),
  COMMISSIONPCT DECIMAL,
  SALESYTD DECIMAL,
  SALESLASTYEAR DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key TERRITORYID references SALESTERRITORY(SALESTERRITORYID),
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID)
);
CREATE TABLE SALESTERRITORY (
  TERRITORYID INT primary key,
  NAME VARCHAR(255),
  COUNTRYREGIONCODE VARCHAR(3),
  REGION VARCHAR(255),
  SALESYTD DECIMAL,
  SALESLASTYEAR DECIMAL,
  COSTYTD VARCHAR(255),
  COSTLASTYEAR VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key COUNTRYREGIONCODE references COUNTRYREGION(COUNTRYREGIONCODE)
);
CREATE TABLE SALESTERRITORYHISTORY (
  BUSINESSENTITYID INT,
  TERRITORYID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references SALESPERSON(BUSINESSENTITYID),
  foreign key TERRITORYID references SALESTERRITORY(SALESTERRITORYID)
);",Retrieve the id of all salespersons along with the array of territory names they do or had done sale in and the total sales amount they have achieved this year. Order by highest total sales amount,"SELECT SP.BUSINESSENTITYID AS Salesperson_ID, JSON_ARRAYAGG(ST.NAME) AS Territory_Names, SP.SALESYTD AS Total_Sales_Amount FROM SALESPERSON AS SP JOIN SALESTERRITORYHISTORY AS STH ON SP.BUSINESSENTITYID = STH.BUSINESSENTITYID JOIN SALESTERRITORY AS ST ON STH.TERRITORYID = ST.TERRITORYID GROUP BY SP.BUSINESSENTITYID, SP.SALESYTD ORDER BY SP.SALESYTD DESC"
"CREATE TABLE SALESORDERHEADER (
  SALESORDERID INT primary key,
  REVISIONNUMBER INT,
  ORDERDATE DATETIME,
  DUEDATE DATETIME,
  SHIPDATE DATETIME,
  STATUS ENUM('In process', 'Approved', 'Backordered', 'Rejected', 'Shipped', 'Cancelled'),
  ONLINEORDERFLAG BOOLEAN,
  SALESORDERNUMBER INT,
  PURCHASEORDERNUMBER VARCHAR(255),
  ACCOUNTNUMBER VARCHAR(255),
  CUSTOMERID INT,
  SALESPERSONID INT,
  TERRITORYID INT,
  BILLTOADDRESSID INT,
  SHIPTOADDRESSID INT,
  SHIPMETHODID INT,
  CREDITCARDID INT,
  CREDITCARDAPPROVALCODE VARCHAR(255),
  CURRENCYRATEID INT,
  SUBTOTAL DECIMAL,
  TAXAMT DECIMAL,
  FREIGHT DECIMAL,
  TOTALDUE DECIMAL,
  COMMENT DECIMAL,
  ROWGUID VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key CUSTOMERID references CUSTOMER(BUSINESSENTITYID),
  foreign key SALESPERSONID references SALESPERSON(BUSINESSENTITYID),
  foreign key TERRITORYID references SALESTERRITORY(SALESTERRITORYID),
  foreign key BILLTOADDRESSID references ADDRESS(ADDRESSID),
  foreign key SHIPTOADDRESSID references ADDRESS(ADDRESSID),
  foreign key SHIPMETHODID references SHIPMETHOD(SHIPMETHODID),
  foreign key CREDITCARDID references CREDITCARD(CREDITCARDID),
  foreign key CURRENCYRATEID references CURRENCYRATE(CURRENCYRATEID)
);","Show the sales orders and their respective freight costs, and if the freight cost exceeds 50, label it as 'High Freight', otherwise label it as 'Low Freight'. Order by sales order id","SELECT SALESORDERID, FREIGHT, CASE WHEN FREIGHT > 50 THEN 'High Freight' ELSE 'Low Freight' END AS FREIGHT_LABEL FROM SALESORDERHEADER ORDER BY SALESORDERID"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTINVENTORY (
  BUSINESSENTITYID INT,
  PRODUCTID INT,
  LOCATIONID INT,
  SHELF VARCHAR(255),
  BIN INT,
  QUANTITY INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key LOCATIONID references LOCATION(LOCATIONID)
);","List the product names and their quantities in stock, and if the quantity is zero, label it as 'Out of Stock', otherwise label it as 'In Stock'. Sort by product name","SELECT PRODUCT.NAME, PRODUCTINVENTORY.QUANTITY, CASE WHEN PRODUCTINVENTORY.QUANTITY = 0 THEN 'Out of Stock' ELSE 'In Stock' END AS STOCK_STATUS FROM PRODUCT JOIN PRODUCTINVENTORY ON PRODUCT.PRODUCTID = PRODUCTINVENTORY.PRODUCTID ORDER BY PRODUCT.NAME"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTLISTPRICEHISTORY (
  PRODUCTID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  LISTPRICE DECIMAL,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID)
);",show list of product names and their corresponding lowest list price and date range when it was lowest. Order by product name,"SELECT P.NAME, MIN(PL.LISTPRICE) AS LOWEST_LIST_PRICE, PL.STARTDATE, PL.ENDDATE FROM PRODUCT AS P JOIN PRODUCTLISTPRICEHISTORY AS PL ON P.PRODUCTID = PL.PRODUCTID GROUP BY P.NAME, PL.STARTDATE, PL.ENDDATE ORDER BY P.NAME"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);",show list of product names and average profit made on each product using listprice and standardcost as cost price. Sort by highest average profit,"SELECT P.NAME, AVG(P.LISTPRICE - P.STANDARDCOST) AS AVERAGE_PROFIT FROM PRODUCT AS P GROUP BY P.NAME ORDER BY AVERAGE_PROFIT DESC"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE WORKORDER (
  WORKORDERID INT primary key,
  PRODUCTID INT,
  ORDERQTY INT,
  STOCKEDQTY INT,
  SCRAPPEDQTY INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  DUEDATE DATETIME,
  SCRAPREASONID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key SCRAPREASONID references SCRAPREASON(SCRAPREASONID)
);",list product name and total quantity of product that was scrapped. sort by most scrapped product,"SELECT P.NAME, SUM(W.SCRAPPEDQTY) AS TOTAL_SCRAPPED_QTY FROM WORKORDER AS W JOIN PRODUCT AS P ON W.PRODUCTID = P.PRODUCTID GROUP BY P.NAME ORDER BY TOTAL_SCRAPPED_QTY DESC"
"CREATE TABLE WORKORDER (
  WORKORDERID INT primary key,
  PRODUCTID INT,
  ORDERQTY INT,
  STOCKEDQTY INT,
  SCRAPPEDQTY INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  DUEDATE DATETIME,
  SCRAPREASONID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key SCRAPREASONID references SCRAPREASON(SCRAPREASONID)
);",show overall total quantity of scrapped products,SELECT SUM(SCRAPPEDQTY) AS TOTAL_SCRAPPED_QTY FROM WORKORDER
"CREATE TABLE WORKORDER (
  WORKORDERID INT primary key,
  PRODUCTID INT,
  ORDERQTY INT,
  STOCKEDQTY INT,
  SCRAPPEDQTY INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  DUEDATE DATETIME,
  SCRAPREASONID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key SCRAPREASONID references SCRAPREASON(SCRAPREASONID)
);
CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);","list all product names that had the least total quantity scrapped amongst all products in all orders, sort by product name","SELECT P.NAME FROM PRODUCT AS P JOIN WORKORDER AS W ON P.PRODUCTID = W.PRODUCTID GROUP BY P.NAME, P.PRODUCTID HAVING SUM(W.SCRAPPEDQTY) = (SELECT MIN(TOTAL_SCRAPPEDQTY) FROM (SELECT SUM(WO.SCRAPPEDQTY) AS TOTAL_SCRAPPEDQTY FROM WORKORDER AS WO GROUP BY WO.PRODUCTID) AS T) ORDER BY P.NAME"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE WORKORDER (
  WORKORDERID INT primary key,
  PRODUCTID INT,
  ORDERQTY INT,
  STOCKEDQTY INT,
  SCRAPPEDQTY INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  DUEDATE DATETIME,
  SCRAPREASONID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key SCRAPREASONID references SCRAPREASON(SCRAPREASONID)
);",show product name and percent of ordered quantity that was scrapped in all orders rounded to 2 digits. Sort by highest scrapped percent,"SELECT P.NAME, ROUND((SUM(W.SCRAPPEDQTY) / SUM(W.ORDERQTY)) * 100, 2) AS SCRAPPED_PERCENT FROM PRODUCT AS P JOIN WORKORDER AS W ON P.PRODUCTID = W.PRODUCTID GROUP BY P.NAME ORDER BY SCRAPPED_PERCENT DESC"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE WORKORDER (
  WORKORDERID INT primary key,
  PRODUCTID INT,
  ORDERQTY INT,
  STOCKEDQTY INT,
  SCRAPPEDQTY INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  DUEDATE DATETIME,
  SCRAPREASONID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key SCRAPREASONID references SCRAPREASON(SCRAPREASONID)
);
CREATE TABLE SCRAPREASON (
  SCRAPREASONID INT primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);",get the product name and percent of quantity that was scrapped the most in a single order and the reason for it to be scrapped,"SELECT P.NAME AS product_name, (W.SCRAPPEDQTY / W.ORDERQTY) * 100 AS scrapped_percentage, S.NAME AS scrap_reason FROM WORKORDER AS W JOIN PRODUCT AS P ON W.PRODUCTID = P.PRODUCTID JOIN SCRAPREASON AS S ON W.SCRAPREASONID = S.SCRAPREASONID ORDER BY scrapped_percentage DESC LIMIT 1"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE SPECIALOFFERPRODUCT (
  SPECIALOFFERID INT,
  PRODUCTID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key SPECIALOFFERID references SPECIALOFFER(SPECIALOFFERID)
);
CREATE TABLE SPECIALOFFER (
  SPECIALOFFERID INT primary key,
  DESCRIPTION VARCHAR(255),
  DISCOUNTPCT DECIMAL,
  TYPE VARCHAR(255),
  CATEGORY VARCHAR(255),
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  MINQTY INT,
  MAXQTY INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);","show the product name and discount and listprice of products after applying discount represented as fraction, sort by highest discount percent","SELECT P.NAME AS product_name, SO.DISCOUNTPCT AS discount_pct, P.LISTPRICE AS list_price, P.LISTPRICE * (1 - SO.DISCOUNTPCT) AS price_after_discount FROM PRODUCT AS P JOIN SPECIALOFFERPRODUCT AS SOP ON P.PRODUCTID = SOP.PRODUCTID JOIN SPECIALOFFER AS SO ON SOP.SPECIALOFFERID = SO.SPECIALOFFERID ORDER BY SO.DISCOUNTPCT DESC"
"CREATE TABLE BUSINESSENTITYADDRESS (
  BUSINESSENTITYID INT,
  ADDRESSID INT,
  ADDRESSTYPEID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
  foreign key ADDRESSID references ADDRESS(ADDRESSID)
  foreign key ADDRESSTYPEID references ADDRESSTYPE(ADDRESSTYPEID)
);
CREATE TABLE VENDOR (
  BUSINESSENTITYID INT,
  ACCOUNTNUMBER VARCHAR(255),
  NAME VARCHAR(255),
  CREDITRATING ENUM(1,2,3,4,5),
  PREFERREDVENDORSTATUS BOOLEAN,
  ACTIVEFLAG BOOLEAN,
  PURCHASINGWEBSERVICEURL VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITYADDRESS(BUSINESSENTITYID),
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
);
CREATE TABLE ADDRESS (
  ADDRESSID INT primary key,
  ADDRESSLINE1 VARCHAR(255),
  ADDRESSLINE2 VARCHAR(255),
  CITY VARCHAR(255),
  STATEPROVINCEID INT,
  POSTALCODE VARCHAR(255),
  SPATIALLOCATION VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key STATEPROVINCEID references STATEPROVINCE(STATEPROVINCEID)
);
CREATE TABLE STATEPROVINCE (
  STATEPROVINCEID INT primary key,
  STATEPROVINCECODE VARCHAR(3),
  COUNTRYREGIONCODE VARCHAR(3),
  ISONLYSTATEPROVINCEFLAG BOOLEAN,
  NAME VARCHAR(50),
  TERRITORYID INT,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key TERRITORYID references SALESTERRITORY(TERRITORYID),
  foreign key COUNTRYREGIONCODE references COUNTRYREGION(COUNTRYREGIONCODE)
);
CREATE TABLE COUNTRYREGION (
  COUNTRYREGIONCODE VARCHAR(3) primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);","get vendor name,  account number, full address of all active vendors (active flag = 1). Order by name","SELECT V.NAME, V.ACCOUNTNUMBER, CONCAT(A.ADDRESSLINE1, ' ', COALESCE(A.ADDRESSLINE2, ''), ' ', A.CITY, ' ', SP.NAME, ' ', CR.NAME, ' ', A.POSTALCODE) AS FULL_ADDRESS FROM VENDOR AS V JOIN BUSINESSENTITYADDRESS AS BEA ON V.BUSINESSENTITYID = BEA.BUSINESSENTITYID JOIN ADDRESS AS A ON BEA.ADDRESSID = A.ADDRESSID JOIN STATEPROVINCE AS SP ON A.STATEPROVINCEID = SP.STATEPROVINCEID JOIN COUNTRYREGION AS CR ON SP.COUNTRYREGIONCODE = CR.COUNTRYREGIONCODE WHERE V.ACTIVEFLAG = 1 ORDER BY V.NAME"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE SALESORDERDETAIL (
  SALESORDERID INT,
  SALESORDERDETAILID INT primary key,
  CARRIERTRACKINGNUMBER VARCHAR(255),
  ORDERQTY INT,
  PRODUCTID INT,
  SPECIALOFFERID INT,
  UNITPRICE DECIMAL,
  UNITPRICEDISCOUNT DECIMAL,
  LINETOTAL DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SALESORDERID references SALESORDERHEADER(SALESORDERID),
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key SPECIALOFFERID references SPECIALOFFERPRODUCT(SPECIALOFFERID)
);",Are there any products that have never been sold? Sort by product name,SELECT p.NAME FROM PRODUCT AS p LEFT JOIN SALESORDERDETAIL AS sod ON p.PRODUCTID = sod.PRODUCTID WHERE sod.PRODUCTID IS NULL ORDER BY p.NAME
"CREATE TABLE EMAILADDRESS (
  BUSINESSENTITYID INT,
  EMAILADDRESSID INT primary key,
  EMAILADDRESS VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID),
);","Find most common email address domain, which is found to the right of the @ symbol.","SELECT SUBSTRING(EMAILADDRESS, LOCATE('@', EMAILADDRESS) + 1) AS DOMAIN, COUNT(*) AS COUNT FROM EMAILADDRESS GROUP BY DOMAIN ORDER BY COUNT DESC LIMIT 1"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PURCHASEORDERDETAIL (
  PURCHASEORDERID INT,
  PURCHASEORDERDETAILID INT primary key,
  DUEDATE DATETIME,
  ORDERQTY INT,
  PRODUCTID INT,
  UNITPRICE DECIMAL,
  LINETOTAL DECIMAL,
  RECEIVEDQTY DECIMAL,
  REJECTEDQTY DECIMAL,
  STOCKEDQTY DECIMAL,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key PURCHASEORDERID references PURCHASEORDERHEADER(PURCHASEORDERID)
);","show me purchase orders details including Product name, due date, Order Quantity, Unit Price, Total of only the products 'Blade' or 'Chainring' or 'Down Tube' ordered. Sort by purchase order id","SELECT P.NAME, POD.DUEDATE, POD.ORDERQTY, POD.UNITPRICE, POD.LINETOTAL FROM PURCHASEORDERDETAIL AS POD JOIN PRODUCT AS P ON POD.PRODUCTID = P.PRODUCTID WHERE P.NAME IN ('Blade', 'Chainring', 'Down Tube') ORDER BY POD.PURCHASEORDERID"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PURCHASEORDERDETAIL (
  PURCHASEORDERID INT,
  PURCHASEORDERDETAILID INT primary key,
  DUEDATE DATETIME,
  ORDERQTY INT,
  PRODUCTID INT,
  UNITPRICE DECIMAL,
  LINETOTAL DECIMAL,
  RECEIVEDQTY DECIMAL,
  REJECTEDQTY DECIMAL,
  STOCKEDQTY DECIMAL,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key PURCHASEORDERID references PURCHASEORDERHEADER(PURCHASEORDERID)
);","show me name of top 10 most purchased products. If total purchased is same, sort by product name","SELECT P.NAME, SUM(POD.ORDERQTY) AS TOTAL_PURCHASED FROM PRODUCT AS P JOIN PURCHASEORDERDETAIL AS POD ON P.PRODUCTID = POD.PRODUCTID GROUP BY P.NAME ORDER BY TOTAL_PURCHASED DESC, P.NAME ASC LIMIT 10"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PURCHASEORDERDETAIL (
  PURCHASEORDERID INT,
  PURCHASEORDERDETAILID INT primary key,
  DUEDATE DATETIME,
  ORDERQTY INT,
  PRODUCTID INT,
  UNITPRICE DECIMAL,
  LINETOTAL DECIMAL,
  RECEIVEDQTY DECIMAL,
  REJECTEDQTY DECIMAL,
  STOCKEDQTY DECIMAL,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key PURCHASEORDERID references PURCHASEORDERHEADER(PURCHASEORDERID)
);","show me name of top 10 least purchased products. If total purchased is same, sort by product name","SELECT P.NAME, SUM(POD.ORDERQTY) AS TOTAL_PURCHASED FROM PRODUCT AS P JOIN PURCHASEORDERDETAIL AS POD ON P.PRODUCTID = POD.PRODUCTID GROUP BY P.NAME ORDER BY TOTAL_PURCHASED ASC, P.NAME ASC LIMIT 10"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTCATEGORY (
  PRODUCTCATEGORYID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);","show product name, product category and product subcategory and the list price by highest list price","SELECT p.NAME AS product_name, pc.NAME AS product_category, psc.NAME AS product_subcategory, p.LISTPRICE FROM PRODUCT AS p JOIN PRODUCTSUBCATEGORY AS psc ON p.PRODUCTSUBCATEGORYID = psc.PRODUCTSUBCATEGORYID JOIN PRODUCTCATEGORY AS pc ON psc.PRODUCTCATEGORYID = pc.PRODUCTCATEGORYID ORDER BY p.LISTPRICE DESC"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);",show average list price of each product subcategory. Sort by subcategory,"SELECT ps.NAME AS subcategory, AVG(p.LISTPRICE) AS avg_list_price FROM PRODUCT AS p JOIN PRODUCTSUBCATEGORY AS ps ON p.PRODUCTSUBCATEGORYID = ps.PRODUCTSUBCATEGORYID GROUP BY ps.NAME ORDER BY ps.NAME"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTCATEGORY (
  PRODUCTCATEGORYID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);",show average list price of each product category sorted by lowest average price,"SELECT pc.NAME AS category_name, AVG(p.LISTPRICE) AS avg_list_price FROM PRODUCT AS p JOIN PRODUCTSUBCATEGORY AS psc ON p.PRODUCTSUBCATEGORYID = psc.PRODUCTSUBCATEGORYID JOIN PRODUCTCATEGORY AS pc ON psc.PRODUCTCATEGORYID = pc.PRODUCTCATEGORYID GROUP BY pc.NAME ORDER BY avg_list_price ASC"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PURCHASEORDERDETAIL (
  PURCHASEORDERID INT,
  PURCHASEORDERDETAILID INT primary key,
  DUEDATE DATETIME,
  ORDERQTY INT,
  PRODUCTID INT,
  UNITPRICE DECIMAL,
  LINETOTAL DECIMAL,
  RECEIVEDQTY DECIMAL,
  REJECTEDQTY DECIMAL,
  STOCKEDQTY DECIMAL,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key PURCHASEORDERID references PURCHASEORDERHEADER(PURCHASEORDERID)
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);",show all different product subcategory that has not been purchased yet. Order by subcategory,SELECT DISTINCT ps.NAME AS subcategory_name FROM PRODUCTSUBCATEGORY AS ps LEFT JOIN PRODUCT AS p ON ps.PRODUCTSUBCATEGORYID = p.PRODUCTSUBCATEGORYID LEFT JOIN PURCHASEORDERDETAIL AS pod ON p.PRODUCTID = pod.PRODUCTID WHERE pod.PRODUCTID IS NULL ORDER BY subcategory_name
"CREATE TABLE VENDOR (
  BUSINESSENTITYID INT,
  ACCOUNTNUMBER VARCHAR(255),
  NAME VARCHAR(255),
  CREDITRATING ENUM(1,2,3,4,5),
  PREFERREDVENDORSTATUS BOOLEAN,
  ACTIVEFLAG BOOLEAN,
  PURCHASINGWEBSERVICEURL VARCHAR(255),
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references BUSINESSENTITYADDRESS(BUSINESSENTITYID),
  foreign key BUSINESSENTITYID references BUSINESSENTITY(BUSINESSENTITYID)
);",filter all the vendors who have the max credit rating amongst all and are active (active flag is 1). Sort by name,"SELECT NAME, CREDITRATING FROM VENDOR WHERE CREDITRATING = (SELECT MAX(CREDITRATING) FROM VENDOR WHERE ACTIVEFLAG = 1) AND ACTIVEFLAG = 1 ORDER BY NAME"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTCATEGORY (
  PRODUCTCATEGORYID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);","show product name, subcategory which does not belong to product category 'Bikes' and respective list price. Sort by max list price","SELECT PRODUCT.NAME, PRODUCTSUBCATEGORY.NAME, PRODUCT.LISTPRICE FROM PRODUCT JOIN PRODUCTSUBCATEGORY ON PRODUCT.PRODUCTSUBCATEGORYID = PRODUCTSUBCATEGORY.PRODUCTSUBCATEGORYID JOIN PRODUCTCATEGORY ON PRODUCTSUBCATEGORY.PRODUCTCATEGORYID = PRODUCTCATEGORY.PRODUCTCATEGORYID WHERE PRODUCTCATEGORY.NAME <> 'Bikes' ORDER BY PRODUCT.LISTPRICE DESC"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTCATEGORY (
  PRODUCTCATEGORYID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);
CREATE TABLE SALESORDERDETAIL (
  SALESORDERID INT,
  SALESORDERDETAILID INT primary key,
  CARRIERTRACKINGNUMBER VARCHAR(255),
  ORDERQTY INT,
  PRODUCTID INT,
  SPECIALOFFERID INT,
  UNITPRICE DECIMAL,
  UNITPRICEDISCOUNT DECIMAL,
  LINETOTAL DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SALESORDERID references SALESORDERHEADER(SALESORDERID),
  foreign key PRODUCTID references PRODUCT(PRODUCTID),
  foreign key SPECIALOFFERID references SPECIALOFFERPRODUCT(SPECIALOFFERID)
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);",show product subcategory which does not belong to product category 'Bikes'. Sort by total maximum amount earned via sales of each sub category,"SELECT psc.NAME AS subcategory_name, SUM(sod.LINETOTAL) AS total_sales FROM PRODUCTSUBCATEGORY AS psc JOIN PRODUCT AS p ON psc.PRODUCTSUBCATEGORYID = p.PRODUCTSUBCATEGORYID JOIN SALESORDERDETAIL AS sod ON p.PRODUCTID = sod.PRODUCTID JOIN PRODUCTCATEGORY AS pc ON psc.PRODUCTCATEGORYID = pc.PRODUCTCATEGORYID WHERE pc.NAME <> 'Bikes' GROUP BY psc.NAME ORDER BY total_sales DESC"
"CREATE TABLE FACTSURVEYRESPONSE (
  SURVEYRESPONSEKEY INT primary key,
  DATEKEY INT,
  CUSTOMERKEY INT,
  PRODUCTCATEGORYKEY INT,
  ENGLISHPRODUCTCATEGORYNAME VARCHAR(255),
  PRODUCTSUBCATEGORYKEY INT,
  ENGLISHPRODUCTSUBCATEGORYNAME VARCHAR(255),
  DATE DATETIME,
  foreign key DATEKEY references DIMDATE(DATEKEY),
  foreign key CUSTOMERKEY references DIMCUSTOMER(CUSTOMERKEY),
  foreign key PRODUCTCATEGORYKEY references DIMPRODUCTCATEGORY(PRODUCTCATEGORYKEY),
  foreign key PRODUCTSUBCATEGORYKEY references DIMPRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYKEY)
);",get all unique english product categories sorted by number of subcategories in that category,"SELECT ENGLISHPRODUCTCATEGORYNAME, COUNT(DISTINCT PRODUCTSUBCATEGORYKEY) AS NUM_SUBCATEGORIES FROM FACTSURVEYRESPONSE GROUP BY ENGLISHPRODUCTCATEGORYNAME ORDER BY NUM_SUBCATEGORIES DESC"
"CREATE TABLE DIMEMPLOYEE (
  EMPLOYEEKEY INT primary key,
  PARENTEMPLOYEEKEY INT,
  EMPLOYEENATIONALIDALTERNATEKEY VARCHAR(255),
  PARENTEMPLOYEENATIONALIDALTERNATEKEY VARCHAR(255),
  SALESTERRITORYKEY INT,
  FIRSTNAME VARCHAR(255),
  LASTNAME VARCHAR(255),
  MIDDLENAME VARCHAR(255),
  NAMESTYLE BOOLEAN,
  TITLE VARCHAR(255),
  HIREDATE DATE,
  BIRTHDATE DATE,
  LOGINID VARCHAR(255),
  EMAILADDRESS VARCHAR(255),
  PHONE VARCHAR(255),
  MARITALSTATUS ENUM('S', 'M'),
  EMERGENCYCONTACTNAME VARCHAR(255),
  EMERGENCYCONTACTPHONE VARCHAR(255),
  SALARIEDFLAG BOOLEAN,
  GENDER ENUM('M', 'F'),
  PAYFREQUENCY ENUM('Monthly', 'Biweekly'),
  BASERATE DECIMAL,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  SALESPERSONFLAG BOOLEAN,
  DEPARTMENTNAME VARCHAR(255),
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  STATUS ENUM('Current', 'null')
);","get full manager name and count of employees reporting to them, parent employee key is the manager key to which the current employee reports to, sort by highest reporting employees","SELECT CONCAT(E.FIRSTNAME, ' ', E.LASTNAME) AS MANAGER_NAME, COUNT(*) AS REPORTING_EMPLOYEES FROM DIMEMPLOYEE AS M JOIN DIMEMPLOYEE AS E ON E.EMPLOYEEKEY = M.PARENTEMPLOYEEKEY WHERE NOT M.PARENTEMPLOYEEKEY IS NULL GROUP BY E.FIRSTNAME, E.LASTNAME ORDER BY REPORTING_EMPLOYEES DESC"
"CREATE TABLE DIMEMPLOYEE (
  EMPLOYEEKEY INT primary key,
  PARENTEMPLOYEEKEY INT,
  EMPLOYEENATIONALIDALTERNATEKEY VARCHAR(255),
  PARENTEMPLOYEENATIONALIDALTERNATEKEY VARCHAR(255),
  SALESTERRITORYKEY INT,
  FIRSTNAME VARCHAR(255),
  LASTNAME VARCHAR(255),
  MIDDLENAME VARCHAR(255),
  NAMESTYLE BOOLEAN,
  TITLE VARCHAR(255),
  HIREDATE DATE,
  BIRTHDATE DATE,
  LOGINID VARCHAR(255),
  EMAILADDRESS VARCHAR(255),
  PHONE VARCHAR(255),
  MARITALSTATUS ENUM('S', 'M'),
  EMERGENCYCONTACTNAME VARCHAR(255),
  EMERGENCYCONTACTPHONE VARCHAR(255),
  SALARIEDFLAG BOOLEAN,
  GENDER ENUM('M', 'F'),
  PAYFREQUENCY ENUM('Monthly', 'Biweekly'),
  BASERATE DECIMAL,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  SALESPERSONFLAG BOOLEAN,
  DEPARTMENTNAME VARCHAR(255),
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  STATUS ENUM('Current', 'null')
);",show employee names having base rate in top 10 percentile. Sort by highest base rate,"SELECT EMPLOYEEKEY, FIRSTNAME, LASTNAME, BASERATE FROM DIMEMPLOYEE WHERE BASERATE >= (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY BASERATE) FROM DIMEMPLOYEE) ORDER BY BASERATE DESC"
"CREATE TABLE DIMPRODUCT (
  PRODUCTKEY INT primary key,
  PRODUCTALTERNATEKEY VARCHAR(255),
  PRODUCTSUBCATEGORYKEY INT,
  WEIGHTUNITMEASURECODE VARCHAR(3),
  SIZEUNITMEASURECODE VARCHAR(3),
  ENGLISHPRODUCTNAME VARCHAR(255),
  SPANISHPRODUCTNAME VARCHAR(255),
  FRENCHPRODUCTNAME VARCHAR(255),
  STANDARDCOST DECIMAL,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZERANGE VARCHAR(255),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE VARCHAR(255),
  DEALERPRICE DECIMAL,
  CLASS VARCHAR(255),
  STYLE VARCHAR(255),
  MODELNAME VARCHAR(255),
  ENGLISHDESCRIPTION VARCHAR(255),
  FRENCHDESCRIPTION VARCHAR(255),
  CHINESEDESCRIPTION VARCHAR(255),
  ARABICDESCRIPTION VARCHAR(255),
  HEBREWDESCRIPTION VARCHAR(255),
  THAIDESCRIPTION VARCHAR(255),
  GERMANDESCRIPTION VARCHAR(255),
  JAPANESEDESCRIPTION VARCHAR(255),
  TURKISHDESCRIPTION VARCHAR(255),
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  STATUS ENUM('Current', 'null'),
  foreign key PRODUCTSUBCATEGORYKEY references DIMPRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYKEY)
);
CREATE TABLE FACTINTERNETSALES (
  PRODUCTKEY INT,
  ORDERDATEKEY INT,
  DUEDATEKEY INT,
  SHIPDATEKEY INT,
  CUSTOMERKEY INT,
  PROMOTIONKEY INT,
  CURRENCYKEY INT,
  SALESTERRITORYKEY INT,
  SALESORDERNUMBER INT,
  SALESORDERLINENUMBER INT,
  REVISIONNUMBER INT,
  ORDERQUANTITY INT,
  UNITPRICE DECIMAL,
  EXTENDEDAMOUNT DECIMAL,
  UNITPRICEDISCOUNTPCT DECIMAL,
  DISCOUNTAMOUNT DECIMAL,
  PRODUCTSTANDARDCOST DECIMAL,
  TOTALPRODUCTCOST DECIMAL,
  SALESAMOUNT DECIMAL,
  TAXAMT DECIMAL,
  FREIGHT DECIMAL,
  CARRIERTRACKINGNUMBER VARCHAR(255),
  CUSTOMERPONUMBER VARCHAR(255),
  ORDERDATE DATETIME,
  DUEDATE DATETIME,
  SHIPDATE DATETIME,
  foreign key ORDERDATEKEY references DIMDATE(DATEKEY),
  foreign key DUEDATEKEY references DIMDATE(DATEKEY),
  foreign key SHIPDATEKEY references DIMDATE(DATEKEY),
  foreign key PRODUCTKEY references DIMPRODUCT(PRODUCTKEY),
  foreign key CUSTOMERKEY references DIMCUSTOMER(CUSTOMERKEY),
  foreign key PROMOTIONKEY references DIMPROMOTION(PROMOTIONKEY),
  foreign key CURRENCYKEY references DIMCURRENCY(CURRENCYKEY),
  foreign key SALESTERRITORYKEY references DIMSALESTERRITORY(SALESTERRITORYKEY)
);
CREATE TABLE FACTRESELLERSALES (
  PRODUCTKEY INT,
  ORDERDATEKEY INT,
  DUEDATEKEY INT,
  SHIPDATEKEY INT,
  RESELLERKEY INT,
  EMPLOYEEKEY INT,
  PROMOTIONKEY INT,
  CURRENCYKEY INT,
  SALESTERRITORYKEY INT,
  SALESORDERNUMBER INT,
  SALESORDERLINENUMBER INT,
  REVISIONNUMBER INT,
  ORDERQUANTITY INT,
  UNITPRICE DECIMAL,
  EXTENDEDAMOUNT DECIMAL,
  UNITPRICEDISCOUNTPCT DECIMAL,
  DISCOUNTAMOUNT DECIMAL,
  PRODUCTSTANDARDCOST DECIMAL,
  TOTALPRODUCTCOST DECIMAL,
  SALESAMOUNT DECIMAL,
  TAXAMT DECIMAL,
  FREIGHT DECIMAL,
  CARRIERTRACKINGNUMBER VARCHAR(255),
  CUSTOMERPONUMBER VARCHAR(255),
  ORDERDATE DATETIME,
  DUEDATE DATETIME,
  SHIPDATE DATETIME,
  foreign key ORDERDATEKEY references DIMDATE(DATEKEY),
  foreign key DUEDATEKEY references DIMDATE(DATEKEY),
  foreign key SHIPDATEKEY references DIMDATE(DATEKEY),
  foreign key PRODUCTKEY references DIMPRODUCT(PRODUCTKEY),
  foreign key RESELLERKEY references DIMRESELLER(RESELLERKEY),
  foreign key EMPLOYEEKEY references DIMEMPLOYEE(EMPLOYEEKEY),
  foreign key PROMOTIONKEY references DIMPROMOTION(PROMOTIONKEY),
  foreign key CURRENCYKEY references DIMCURRENCY(CURRENCYKEY),
  foreign key SALESTERRITORYKEY references DIMSALESTERRITORY(SALESTERRITORYKEY)
);","for each product filter only those that have both internet sales and reseller sales, show total sales done by resellers and total sales done by internet. Order by product name","SELECT DP.ENGLISHPRODUCTNAME AS PRODUCT_NAME, SUM(FRS.SALESAMOUNT) AS TOTAL_RESELLER_SALES, SUM(FIS.SALESAMOUNT) AS TOTAL_INTERNET_SALES FROM DIMPRODUCT AS DP JOIN FACTRESELLERSALES AS FRS ON DP.PRODUCTKEY = FRS.PRODUCTKEY JOIN FACTINTERNETSALES AS FIS ON DP.PRODUCTKEY = FIS.PRODUCTKEY GROUP BY DP.ENGLISHPRODUCTNAME HAVING COUNT(DISTINCT FRS.SALESORDERNUMBER) > 0 AND COUNT(DISTINCT FIS.SALESORDERNUMBER) > 0 ORDER BY DP.ENGLISHPRODUCTNAME"
"CREATE TABLE DEPARTMENT (
  DEPARTMENTID INT primary key,
  NAME VARCHAR(255),
  GROUPNAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);","Show the department names padded with asterisks on the left side, making the total length 30 characters. Order by name","SELECT LPAD(NAME, 30, '*') AS PADDED_NAME
FROM DEPARTMENT
ORDER BY NAME;"
"CREATE TABLE COUNTRYREGION (
  COUNTRYREGIONCODE VARCHAR(3) primary key,
  NAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);",Add a new column COUNTRY_NAME_UPPER to get capital country names to table COUNTRYREGION,ALTER TABLE COUNTRYREGION ADD COUNTRY_NAME_UPPER VARCHAR(255); UPDATE COUNTRYREGION SET COUNTRY_NAME_UPPER = UPPER(NAME);
"CREATE TABLE ADDRESS (
  ADDRESSID INT primary key,
  ADDRESSLINE1 VARCHAR(255),
  ADDRESSLINE2 VARCHAR(255),
  CITY VARCHAR(255),
  STATEPROVINCEID INT,
  POSTALCODE VARCHAR(255),
  SPATIALLOCATION VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key STATEPROVINCEID references STATEPROVINCE(STATEPROVINCEID)
);",Add a new column with trimmed addressline1 to table ADDRESS,"ALTER TABLE ADDRESS ADD TRIMMED_ADDRESSLINE1 VARCHAR(255); UPDATE ADDRESS
SET TRIMMED_ADDRESSLINE1 = TRIM(ADDRESSLINE1);"
"CREATE TABLE EMPLOYEE (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);",add a column that checks column birthdate is a valid date to Employee table,ALTER TABLE EMPLOYEE ADD COLUMN birthdate_valid BOOLEAN DEFAULT is_date(BIRTHDATE);
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTCATEGORY (
  PRODUCTCATEGORYID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);",Show products where category is Bikes and list price is less than 1000. Order by product name,SELECT P.NAME FROM PRODUCT AS P JOIN PRODUCTSUBCATEGORY AS PS ON P.PRODUCTSUBCATEGORYID = PS.PRODUCTSUBCATEGORYID JOIN PRODUCTCATEGORY AS PC ON PS.PRODUCTCATEGORYID = PC.PRODUCTCATEGORYID WHERE PC.NAME = 'Bikes' AND P.LISTPRICE < 1000 ORDER BY P.NAME
"CREATE TABLE TEMP_CITY (
  CITY_NAME VARCHAR(255)
);
CREATE TABLE ADDRESS (
  ADDRESSID INT primary key,
  ADDRESSLINE1 VARCHAR(255),
  ADDRESSLINE2 VARCHAR(255),
  CITY VARCHAR(255),
  STATEPROVINCEID INT,
  POSTALCODE VARCHAR(255),
  SPATIALLOCATION VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key STATEPROVINCEID references STATEPROVINCE(STATEPROVINCEID)
);",Get all unique cities from temp_city and address,SELECT DISTINCT CITY_NAME FROM TEMP_CITY UNION SELECT DISTINCT CITY FROM ADDRESS
"CREATE TABLE Employee (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);
CREATE TABLE Department (
  DEPARTMENTID INT primary key,
  NAME VARCHAR(255),
  GROUPNAME VARCHAR(255),
  MODIFIEDDATE DATETIME
);
CREATE TABLE EmployeeDepartmentHistory (
  BUSINESSENTITYID INT,
  DEPARTMENTID INT,
  SHIFTID INT,
  STARTDATE DATETIME,
  ENDDATE DATETIME,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references EMPLOYEE(BUSINESSENTITYID),
  foreign key DEPARTMENTID references DEPARTMENT(DEPARTMENTID),
  foreign key SHIFTID references SHIFT(SHIFTID)
);",get me employee names and corresponding department names,"To get the employee names and corresponding department names, we need to join the 'Employee' table with the 'EmployeeDepartmentHistory' table on 'BUSINESSENTITYID', and then join the result with the 'Department' table on 'DEPARTMENTID'. However, the 'Employee' table does not seem to have a column for employee names. Could you please confirm if there is a column for employee names in the 'Employee' table or if there is another table that contains this information?"
"CREATE TABLE Employee (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);","get yearly number of hires, sort by max hires","SELECT EXTRACT(""year"" FROM HIREDATE) AS HIRE_YEAR, COUNT(*) AS NUMBER_OF_HIRES FROM Employee GROUP BY HIRE_YEAR ORDER BY NUMBER_OF_HIRES DESC"
"CREATE TABLE Employee (
  BUSINESSENTITYID INT primary key,
  NATIONALIDNUMBER VARCHAR(255),
  LOGINID VARCHAR(255),
  ORGANIZATIONNODE VARCHAR(255),
  ORGANIZATIONLEVEL VARCHAR(255),
  JOBTITLE VARCHAR(255),
  BIRTHDATE DATETIME,
  MARITALSTATUS ENUM('M', 'S'),
  GENDER ENUM('M', 'F'),
  HIREDATE DATETIME,
  SALARIEDFLAG BOOLEAN,
  VACATIONHOURS INT,
  SICKLEAVEHOURS INT,
  CURRENTFLAG BOOLEAN,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key BUSINESSENTITYID references PERSON(BUSINESSENTITYID)
);",Show Overall top 3 months and their total hire count having most number of new hires,"SELECT EXTRACT(""month"" FROM HIREDATE) AS HIRE_MONTH, COUNT(*) AS TOTAL_HIRE_COUNT FROM Employee GROUP BY HIRE_MONTH ORDER BY TOTAL_HIRE_COUNT DESC LIMIT 3"
"CREATE TABLE PRODUCT (
  PRODUCTID INT primary key,
  NAME VARCHAR(255),
  PRODUCTNUMBER VARCHAR(255),
  MAKEFLAG BOOLEAN,
  FINISHEDGOODSFLAG BOOLEAN,
  COLOR VARCHAR(255),
  SAFETYSTOCKLEVEL INT,
  REORDERPOINT INT,
  STANDARDCOST DECIMAL,
  LISTPRICE DECIMAL,
  SIZE VARCHAR(255),
  SIZEUNITMEASURECODE VARCHAR(3),
  WEIGHTUNITMEASURECODE VARCHAR(3),
  WEIGHT DECIMAL,
  DAYSTOMANUFACTURE INT,
  PRODUCTLINE ENUM('Road', 'Mountain', 'Touring', 'Standard'),
  CLASS ENUM('H', 'M', 'L'),
  STYLE ENUM('W', 'M', 'U'),
  PRODUCTSUBCATEGORYID INT,
  PRODUCTMODELID INT,
  SELLSTARTDATE DATETIME,
  SELLENDDATE DATETIME,
  DISCONTINUEDDATE DECIMAL,
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key SIZEUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key WEIGHTUNITMEASURECODE references UNITMEASURE(UNITMEASURECODE),
  foreign key PRODUCTSUBCATEGORYID references PRODUCTSUBCATEGORY(PRODUCTSUBCATEGORYID),
  foreign key PRODUCTMODELID references PRODUCTMODEL(PRODUCTMODELID)
);
CREATE TABLE PRODUCTSUBCATEGORY (
  PRODUCTSUBCATEGORYID INT primary key,
  PRODUCTCATEGORYID INT,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME,
  foreign key PRODUCTCATEGORYID references PRODUCTCATEGORY(PRODUCTCATEGORYID)
);
CREATE TABLE PRODUCTCATEGORY (
  PRODUCTCATEGORYID INT primary key,
  NAME VARCHAR(255),
  ROWGUID INT,
  MODIFIEDDATE DATETIME
);",show me all product number of all TVs,Missing Information: Clairfy whether TV is product category name or Porduct Sub Category Name or Product Name